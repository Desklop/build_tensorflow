Порядок сборки:
1. sudo docker pull tensorflow/tensorflow:devel-py3
или sudo docker pull tensorflow/tensorflow:devel-gpu-py3

2. sudo docker run -it -w /tensorflow -v "$PWD:/mnt" -e HOST_PERMS="$(id -u):$(id -g)" tensorflow/tensorflow:devel-py3 bash
или sudo docker run --runtime=nvidia -it -w /tensorflow -v "$PWD:/mnt" -e HOST_PERMS="$(id -u):$(id -g)" tensorflow/tensorflow:devel-gpu-py3 bash

3. git clone https://github.com/tensorflow/tensorflow.git
4. cd tensorflow
5. git checkout r1.13
6. ./configure

Аргументы по умолчанию (https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions): -march=native - использовать параметры текущего CPU, libverbs - для удалённого прямого доступа к памяти Remote Direct Memory Access (RDMA) (нужно перед установкой выполнить sudo apt-get install libibverbs-dev), ngraph - поддержка компилятора Intel nGraph (не работает, сборка nGraph из исходников не дала ускорения работы), gdr - более крутая версия текущего протокола gRPC для распределённых вычислений на GPU (нужен когда размер тензора больше 100Мб), monolithic - сборка без возможности создания своих операций (https://stackoverflow.com/questions/53705582/what-is-meant-by-static-monolithic-build-when-building-tensorflow-from-source), mkl - поддержка библиотеки Intel Math Kernel Library (не работает с --config=cuda (не даёт почти никакого изменения производительности, https://github.com/tensorflow/tensorflow/issues/23238) и доступно только в Linux) (можно так же использовать через pip3 install intel-tensorflow (https://software.intel.com/en-us/articles/intel-optimization-for-tensorflow-installation-guide)) 

Если версия bazel не совпадает с требуемой:
6.1. BAZEL_VERSION="0.21.0"
6.2. wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
6.3. chmod +x bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
6.4. ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
6.5. bazel version   # this should now print the same as BAZEL_VERSION

7. bazel build --config=opt --config=mkl --noincompatible_strict_action_env //tensorflow/tools/pip_package:build_pip_package

Параметр --noincompatible_strict_action_env заставляет bazel использовать ранее указанный в configure путь к python

8. CPU_MODEL=$(cat /proc/cpuinfo | grep -m 1 "model name" | grep -o "\S[0-9]\?-\?[0-9]\{3,5\}\S" | sed "s/\s//g")
8.1. ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /mnt --project_name "tensorflow-$CPU_MODEL"

